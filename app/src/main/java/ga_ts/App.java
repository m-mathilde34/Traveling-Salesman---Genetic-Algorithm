/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ga_ts;

import java.lang.reflect.Array;
import java.util.ArrayList;

public class App {

    public static void main(String[] args) {
        //Set our parameters
        int generationNumber = 1000;
        int popSize = 50;
        int poolSize = 10;
        float mutationRate = 0.10f;

        //Generate our list of cities
        CityGenerator cityGen = new CityGenerator(150, -200,1400,30, true);
        cityGen.writeToCSVFile();
        ArrayList<City> cityList = cityGen.generatedCities;

        //Create our GA
        Population initialPop = new Population(cityList, popSize);

        //Create a list of metrics which we can use to visualise the data
        Route fittestIndiv = initialPop.findFittestIndividual();
        ArrayList<Double> bestFitnessPerGen = new ArrayList<>();
        ArrayList<Double> averageFitnessPerGen = new ArrayList<>();

        Population pop = initialPop;

        int counter=0;
        while(counter<generationNumber){
            //Add our metrics to their lists
            averageFitnessPerGen.add(pop.averageFitness);
            bestFitnessPerGen.add(pop.fittestIndividual.fitness);

            //Start selection
            Selection select1 = new Selection(pop, poolSize);
            Selection select2 = new Selection(pop, poolSize);

            //Get parent1
            Route parent1 = select1.getFittestIndividual();

            //Get parent2
            Route parent2 = select2.getFittestIndividual();

            //Reproduce
            Reproduction reproduction = new Reproduction(parent1, parent2);
            Route child = reproduction.getChild();

            //Mutation?
            Mutation mutation = new Mutation(child, mutationRate);
            Route mutatedChild = mutation.applyMutation(child);

            //Add child to population
            pop.addToPopulation(mutatedChild);

            //Up the counter
            counter++;

        }

        int counter2 = 0;
        while(counter2 < generationNumber){
            System.out.println("Generation : " + "\t" + counter2 + "\n" + "| Average Fitness : "
                    + averageFitnessPerGen.get(counter2) + "\n" + " | Highest Fitness : "
                    + bestFitnessPerGen.get(counter2));
        }

        //Print the results
        System.out.println("Fittest Individual Found : " + "\n"
                + "Distance : " + fittestIndiv.routeDistance + "\n"
                + "Fitness : " + fittestIndiv.fitness + "\n"
                + "Route : " + fittestIndiv.route);

    }

}
